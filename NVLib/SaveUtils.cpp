//--------------------------------------------------
// Implementation of class SaveUtils
//
// @author: Wild Boar
//
// @date: 2022-03-27
//--------------------------------------------------

#include "SaveUtils.h"
using namespace NVLib;

//--------------------------------------------------
// Save Model
//--------------------------------------------------

/**
 * @brief Save a model to disk as a PLY file
 * @param path The path that we are saving the model to
 * @param model The model that we are saving
 */
void SaveUtils::SaveModel(const string& path, Model * model)
{
	auto writer = ofstream(path);

	// Write the header
	writer << "ply" << endl;
	writer << "format ascii 1.0" << endl;
	writer << "comment Generated by Neural Vision Ltd" << endl;
	writer << "element vertex " << model->VertexCount() << endl;
	writer << "property float x" << endl;
	writer << "property float y" << endl;
	writer << "property float z" << endl;
	writer << "property uchar red" << endl;
	writer << "property uchar green" << endl;
	writer << "property uchar blue" << endl;
	writer << "end_header" << endl;

	// Write the data
	for (auto& vertex : model->GetVertices()) 
	{
		// Retrieve the 3D points
		auto X = vertex.GetLocation().x;
		auto Y = vertex.GetLocation().y;
		auto Z = vertex.GetLocation().z;
		if (Z == 0) continue;

		// Retrieve the Color points
		auto R = (int)vertex.GetColor()[0];
		auto G = (int)vertex.GetColor()[1];
		auto B = (int)vertex.GetColor()[2];

		// Write the PLY entry
		char buffer[100];
		sprintf(buffer, "%f %f %f %i %i %i\n", X, Y, Z, B, G, R);
		writer.write(buffer, strlen(buffer));
	}
	
	// Close the writer
	writer.close();
}
